---
- name: Create a Nutanix Vm
  hosts: localhost
  gather_facts: false

  vars:
    vm_name: "MyRHELVM"
    vm_description: "A Red Hat Enterprise Linux VM"
    vm_disk_size: 40
    vm_memory_gb: 8

    cluster_name: MyCluster
    subnet_name: MyNetwork

    image_name: rhel-9.2-x86_64-kvm.qcow2

    categories:
      AppType:
        - "OCP_HAPROXY"

    vm_new_user: notansible
    vm_new_user_password: Passw0rd123!

    vm_new_user_ssh_keys:
      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC7NLoy12rvN+Z5e9UQtpPXywXPbaU3twvphPW0wC8G76hQWVjd+Er5Xo9qyrs2PmMe+JLGkEiWAudSnkZ1vJdmc5ewPr3PRKmuiFkhwe4fMGbUO7H6ITEwZX/0sNqvVjxKOXlnfkd1R/Xy1QHlJySKyu2DVTLxOWeFm+HMNTVoNdRhUmsE2HigTWuMBnqHhVYU8SDAcp0d7js4mnk5F3Srry4+3tKsQ+iqwX4jeI5BLroIltEE8giO9mE3cB8soBX97tWVQuaZYUXxpXMwHl/CXXNEcpORpJ3vjIBlBb9oj7TAB9I7LZEjvhqAlFWWP/vmPYXeWpwXKT2vAFHada9QZOAjB9aSjoHf49hDs+uFwQpO3Xb50zjLQkTnwTUAD1kAQWkXcYdIvxjBXugMJzgxZpQghTvAICvrg0ko7rE0/uTKwyY1PRcaWPUwnnjZ1oJr8NeDrvYRtl4wUl+rHt78/2nWWqaGPuHg5vB3avNUg58lI6CXbhOslufGkPzkjaB8PEqsjUyEiQdQG1tKw9zXuw2MbxMBEEGQ3XavLD/VQrbuH92OjTbSFNhc1jGKjftMVLAB1ymsqP7P1DrborT625DkPf+czOcmMDydZvoC+ComewAnebImr8fqZWZSMWzYuW6dLcEK6o0fAw/J8iOH+EUuCmeLHjiv2yUvxQ0+ew== kemo@endurance.kemo.labs

  module_defaults:
    nutanix.ncp.ntnx_vms:
      nutanix_host: "{{ lookup('ansible.builtin.env', 'NUTANIX_HOSTNAME') }}"
      nutanix_port: "{{ lookup('ansible.builtin.env', 'NUTANIX_PORT') }}"
      nutanix_username: "{{ lookup('ansible.builtin.env', 'NUTANIX_USERNAME') }}"
      nutanix_password: "{{ lookup('ansible.builtin.env', 'NUTANIX_PASSWORD') }}"
      validate_certs: "{{ (lookup('ansible.builtin.env', 'VALIDATE_CERTS') | default('false')) | bool }}"

    nutanix.ncp.ntnx_vms_info:
      nutanix_host: "{{ lookup('ansible.builtin.env', 'NUTANIX_HOSTNAME') }}"
      nutanix_port: "{{ lookup('ansible.builtin.env', 'NUTANIX_PORT') }}"
      nutanix_username: "{{ lookup('ansible.builtin.env', 'NUTANIX_USERNAME') }}"
      nutanix_password: "{{ lookup('ansible.builtin.env', 'NUTANIX_PASSWORD') }}"
      validate_certs: "{{ (lookup('ansible.builtin.env', 'VALIDATE_CERTS') | default('false')) | bool }}"

  tasks:

    - name: Check to see if the VM already exists
      nutanix.ncp.ntnx_vms_info:
        filter:
          vm_name: "{{ vm_name }}"
        kind: vm
      register: vm_info

    - name: Create VM if it does not already exist
      when: vm_info.response.metadata.length == 0
      block:
        - name: Create a temporary directory
          ansible.builtin.tempfile:
            state: directory
          register: temp_file

        - name: Template the cloud-init file
          ansible.builtin.template:
            src: cloud-init.j2
            dest: "{{ temp_file.path }}/cloud-init.cfg"
            mode: 0600

        - name: Create the VM
          nutanix.ncp.ntnx_vms:
            state: present
            name: "{{ vm_name }}"
            desc: "{{ vm_description }}"
            categories: "{{ categories }}"
            cluster:
              name: "{{ cluster_name }}"
            networks:
              - is_connected: true
                subnet:
                  name: "{{ subnet_name }}"
                  # mention cluster only when there are multiple subnets with same name accross clusters
                  # and subnet name is set above
                  # cluster:
                  #   name: "{{ cluster_name }}"
            disks:
              - type: "DISK"
                size_gb: "{{ vm_disk_size }}"
                bus: "SATA"
                clone_image:
                  name: "{{ image_name }}"
            vcpus: "{{ vm_vcpus | default(1) }}"
            cores_per_vcpu: "{{ vm_cores_per_vcpu | default(4) }}"
            memory_gb: "{{ vm_memory_gb }}"
            guest_customization:
              type: "cloud_init"
              script_path: "{{ temp_file.path }}/cloud-init.cfg"
              is_overridable: true
          register: vm_output

        - name: Output of vm created
          ansible.builtin.debug:
            msg: '{{ vm_output }}'

        - name: Delete temporary directory
          ansible.builtin.file:
            path: "{{ temp_file.path }}"
            state: absent

    # - name: Power the VM on
    #   nutanix.ncp.ntnx_vms:
    #     state: power_on
    #     name: "{{ vm_name }}"
    #     cluster:
    #       name: "{{ cluster_name }}"
