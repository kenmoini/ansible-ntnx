---
- name: Get information about a Nutanix VM
  hosts: localhost
  gather_facts: false

  vars:
    vm_name: "MyRHELVM"
    cluster_name: MyCluster

    debug_output: false

  module_defaults:
    nutanix.ncp.ntnx_vms_info:
      nutanix_host: "{{ lookup('ansible.builtin.env', 'NUTANIX_HOSTNAME') }}"
      nutanix_port: "{{ lookup('ansible.builtin.env', 'NUTANIX_PORT') }}"
      nutanix_username: "{{ lookup('ansible.builtin.env', 'NUTANIX_USERNAME') }}"
      nutanix_password: "{{ lookup('ansible.builtin.env', 'NUTANIX_PASSWORD') }}"
      validate_certs: "{{ (lookup('ansible.builtin.env', 'VALIDATE_CERTS') | default('false')) | bool }}"

  tasks:
    - name: Get information about the target VM
      nutanix.ncp.ntnx_vms_info:
        filter:
          vm_name: "{{ vm_name }}"
        kind: vm
      register: vm_result

    - name: Output the VM information
      when: debug_output
      ansible.builtin.debug:
        var: vm_result

    - name: Loop through the list to make sure that the intended VM is in our target cluster
      when: vm_item.spec.cluster_reference.name == cluster_name
      ansible.builtin.set_fact:
        target_vm: "{{ vm_item }}"
      loop: "{{ vm_result.response.entities }}"
      loop_control:
        loop_var: vm_item

    - name: Set the facts for the VM data we need for the next job
      ansible.builtin.set_fact:
        vm_ip:  "{{ target_vm.status.resources.nic_list[0].ip_endpoint_list[0].ip }}"
        vm_uuid: "{{ target_vm.metadata.uuid }}"

    - name: Output the facts found
      ansible.builtin.debug:
        msg: "VM IP: {{ vm_ip }} VM UUID: {{ vm_uuid }}"

    - name: Set variable to pass to next Job
      ansible.builtin.set_stats:
        data:
          vm_ip:  "{{ vm_ip }}"
          vm_uuid: "{{ vm_uuid }}"
